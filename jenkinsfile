 /* groovylint-disable NestedBlockDepth */
 pipeline {
   agent none

 stages {
  stage('worker build') {
        agent {
          docker {
            image 'node:maven:3.6.1-jdk-8-slim'
            args '-v $HOME/.m2:/root/.m2'
          }
        }
        when {
          changeset '**/worker/**'
        }
        steps {
          echo 'compiling worker app'
          dir('worker') {
          sh 'mvn compile'
    }
   }
 }
 stage('work test') {
  agent {
          /* groovylint-disable-next-line NestedBlockDepth */
    docker {
      image 'node:maven:3.6.1-jdk-8-slim'
      args '-v $HOME/.m2:/root/.m2'
     }
    }
    when {
       changeset '**/worker/**'
        }
    steps {
      echo 'running unit tests on worker app'
      dir('worker') {
      sh 'mvn clean test'
   }
  }
 }
 stage('worker package') {
  agent {
    docker {
      image 'node:maven:3.6.1-jdk-8-slim'
      args '-v $HOME/.m2:/root/.m2'
      }
  }
    when {
      branch 'master'
      changeset '**/worker/**'
    }
    steps {
      echo 'Packaging worker app'
      dir('worker') {
      sh 'mvn package -DskipTests'
      archiveArtifacts artifacts: '**/target/*.jar', fingerprint: true
      }

    }
  }
  stage('worker docker-package') {
    agent any
      when {
        changeset '**/worker/**'
          branch 'master'
          }
          steps {
            echo 'Packaging worker app with docker'
            script {
              /* groovylint-disable-next-line NestedBlockDepth */
              docker.withRegistry('https://index.docker.io/v1/', 'dockerlogin') {
                  def workerImage = docker.build("benjakh/worker:v${env.BUILD_ID}", "./worker")
                  workerImage.push()
                  workerImage.push("${env.BRANCH_NAME}")
                  workerImage.push("latest")
            }
          }
      }
    }
    stage ('result build') {
      agent {
        docker {
          image 'node:alpine3.15'
        }
      }
        when {
        changeset '**/result/**'
        }
        steps {
          echo 'Compiling result app..'
          dir('worker') {
          sh 'npm install'
          }
        }
      }
      stage("result test") {
        agent {
          docker {
            image 'node:alpine3.15'
          }
        }
        when {
          changeset '**/result/**'
        }
        steps {
          echo 'Running Unit Test on result app..'
          dir('result') {
          sh 'npm install'
          sh 'npm test'
          }
        }
      }
      stage("result package") {
        agent {
          docker {
            image 'node:alpine3.15'
          }
        }
        when {
          changeset '**/result/**'
          branch 'master'
        }
        steps {
          echo 'Packaging result app'
          dir('result') {
          sh 'npm install'
          sh 'npm package'
          }
        }
  }
  stage('result docker-package') {
    agent {
      docker {
        image 'node:alpine3.15'
        }
      }
    when { 
      changeset '**/result/**'
      branch 'master'
    }
    steps {
      echo 'Packaging vote app with docker'
      script {
        docker.withRegistry('https://index.docker.io/v1/', 'dockerlogin') {
          def workerImage = docker.build("benjakh/vote:v${env.BUILD_ID}", "./result")
          workerImage.push()
          workerImage.push("${env.BRANCH_NAME}")
          workerImage.push("latest")
        }
      }
    }
  }
  stage("vote build") {
    agent {
      docker {
        image 'python:2.7.16-slim'
        args '--user root'
      }
    }
    when {
      changeset '**/vote/**'
    }
    steps {
      echo 'Compiling vote app..'
      dir('vote') {
        sh 'pip install -r requirments.txt'
      }
    }
  }
  stage("vote test") {
    agent {
      docker {
        image 'python:2.7.16-slim'
          args '--user root'
      }
    }
    when {
      changeset "**/vote/**"
        }
      steps {
        echo 'Running Unit Test on vote app..'
        dir('vote') {
          sh 'pip install -r requirements.txt'
          sh 'nosetests -v'
        }
     }
    }
    stage('vote docker-package') {
      agent any
      when {
        changeset '**/vote/**'
      }
      steps {
        echo 'Packaging vote app with docker'
        script {
          docker.withRegistry('https://index.docker.io/v1/', 'dockerlogin') {
          def workerImage = docker.build("benjakh/vote:v${env.BUILD_ID}", "./vote")
            workerImage.push()
            workerImage.push("${env.BRANCH_NAME}")
            workerImage.push('latest')
          }
        }
      }
    }
  }
}
post {
  always {
    echo 'the job is complete'
  }
}